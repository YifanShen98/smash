language: cpp

sudo: required

branches:
  only:
  - master

matrix:
  include:
  # minimal gcc version (also on loewe cluster)
  - os: linux
    dist: trusty
    addons:
      apt:
        packages:
          - libboost-all-dev
          - g++-4.8
          - doxygen
    env:
      - MATRIX_EVAL="CC=gcc-4.8 && CXX=g++-4.8"
  # most recent gcc version
  - os: linux
    dist: bionic
    addons:
      apt:
        sources:
          - sourceline: 'ppa:ubuntu-toolchain-r/test'
        packages:
          - libboost-all-dev
          - g++-9
          - doxygen
    env:
      - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9"
  # test fias gcc version
  - os: linux
    dist: xenial
    addons:
      apt:
        packages:
          - libboost-all-dev
          - g++-5
          - doxygen
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5"
  # most recent clang version on linux
  - os: linux
    dist: bionic
    addons:
      apt:
        sources:
          - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
            key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
        packages:
          - libboost-all-dev
          - clang-9
          - doxygen
    env:
      - MATRIX_EVAL="CC=clang-9 && CXX=clang++-9"
  # most recent xcode (changes also clang version)
  - os: osx
    osx_image: xcode11
    addons:
      homebrew:
        packages:
        - boost
        - doxygen
    env:
      - MATRIX_EVAL="CC=clang && CXX=clang++"

before_install:
  - eval "${MATRIX_EVAL}"
  - export SMASH_ROOT=$(pwd)
  # pythia
  - wget http://home.thep.lu.se/~torbjorn/pythia8/pythia8303.tgz &&
    tar xf pythia8303.tgz && rm pythia8303.tgz &&
    cd pythia8303 &&
    ./configure --cxx-common='-std=c++11 -march=native -mfpmath=sse -O3 -fPIC' &&
    make -j$(nproc) &&
    cd ..
  # clang-format
  - if [ $TRAVIS_OS_NAME = osx ]; then curl -# -o clang6_0_0.tar.xz https://releases.llvm.org/6.0.0/clang+llvm-6.0.0-x86_64-apple-darwin.tar.xz;
   else  curl -# -o clang6_0_0.tar.xz https://releases.llvm.org/6.0.0/clang+llvm-6.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz; fi &&
   mkdir clang6_0_0 && tar -xf clang6_0_0.tar.xz -C clang6_0_0 --strip-components=1
  # gsl
  - wget http://ftpmirror.gnu.org/gsl/gsl-2.0.tar.gz &&
    tar -zxf gsl-2.0.tar.gz && rm gsl-2.0.tar.gz &&
    export GSL=$(pwd)/gsl-2.0 &&
    cd $GSL &&
    ./configure --prefix $GSL &&
    make -j$(nproc) --silent &&
    make install --silent &&
    cd $SMASH_ROOT
  # eigen
  - wget http://gitlab.com/libeigen/eigen/-/archive/3.3.5/eigen-3.3.5.tar.gz &&
    tar -xf eigen-3.3.5.tar.gz -C $HOME
  # cpplint
  - pip install --user cpplint

install:
  - cd $SMASH_ROOT
  - mkdir build
  - cd build
  - cmake -DPythia_CONFIG_EXECUTABLE=$SMASH_ROOT/pythia8303/bin/pythia8-config -DCMAKE_INSTALL_PREFIX=$HOME/eigen-3.3.5/ -DGSL_ROOT_DIR=$GSL ..
  - make -j$(nproc)

script:
  # use correct clang version for format helper
  - PATH=$SMASH_ROOT/clang6_0_0/bin/:$PATH ./../bin/clang-format-helper.bash -t
  - CTEST_OUTPUT_ON_FAILURE=1 ctest -j$(nproc)
  # test that everything is documented
  - make undocumented
  - make undocumented_count
  - (if [[ $(make undocumented_count | grep -E '============ There are ' | grep -o '[[:digit:]]\+') = 0 ]]; then echo 'Everything documented.' && exit 0; else echo 'Some functions are missing documentation. Check `make undocumented`.' && exit 1; fi)
