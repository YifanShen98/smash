name: check_smash_devel_repo

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  workflow-gsi:
    runs-on: [self-hosted,gsi]
    # Name the Job
    name: test_gsi_system
    
    steps:
       # Checks out a copy of the repository
      - uses: actions/checkout@v2
      - name: building_and_testing_SMASH
        run: |
          # we count the number of available cpu cores          
          export nproc=$(cat /proc/cpuinfo | grep processor | wc -l)
          # we set up the variables with the SMASH source and build directories
          export SMASH_ROOT=$GITHUB_WORKSPACE && mkdir -p $SMASH_ROOT/build
          # variables dealing with the Singularity container
          # here we assume that $HOME points to the home directoy of the user "smash"
          export TOOLS_DIR=$HOME/actions-runner/smash_stuff_github_actions
          export PATH=$TOOLS_DIR/clang6_0_0/bin/:$PATH
          export container_file=$TOOLS_DIR/singularity_container.sif
          # we configure and build smash using the environment provided by a Singularity container
          cd $SMASH_ROOT/build
          singularity exec $container_file cmake .. -DPythia_CONFIG_EXECUTABLE=/SMASH/pythia_8_303/bin/pythia8-config \
          -DCMAKE_INSTALL_PREFIX=/SMASH/hepmc3-install -DCMAKE_C_FLAGS="-O3 -mfpmath=sse -march=native" \
          -DCMAKE_CXX_FLAGS="-O3 -mfpmath=sse -march=native" -DCMAKE_CXX_STANDARD=14
          singularity exec $container_file make -j $nproc
          # now we build the documentation
          singularity exec $container_file make doc
          singularity exec $container_file make undocumented
          singularity exec $container_file make undocumented_test
          # now we run the tests
          export CTEST_OUTPUT_ON_FAILURE=1
          singularity exec $container_file ctest -j$nproc
          # finally, we check if the code is well formatted
          cd $SMASH_ROOT
          ./bin/clang-format-helper.bash -t
          
     
  workflow-fias:      
    runs-on: [self-hosted,fias]
    # Name the Job
    name: test_fias_system

    steps:
      # Checks out a copy of the repository
      - uses: actions/checkout@v2
      - name: building_and_testing_SMASH
        run: |
          # we count the number of available cpu cores          
          export nproc=$(cat /proc/cpuinfo | grep processor | wc -l)
          # we set up the variables with the SMASH source and build directories
          export SMASH_ROOT=$GITHUB_WORKSPACE && mkdir -p $SMASH_ROOT/build
          # this directory contains pythia, clang and eigen, which are needed later
          # here we do not use $HOME because the runner is hosted in shared common group directory
          export TOOLS_DIR=/home/hyihp-repos/smash-devel_runners/smash_stuff
          export PATH=$TOOLS_DIR/bin:$TOOLS_DIR/clang6_0_0/bin/:$TOOLS_DIR/cmake-3.20.5/bin:$PATH
          # now we configure and build smash
          cd $SMASH_ROOT/build
          cmake .. -DPythia_CONFIG_EXECUTABLE=$TOOLS_DIR/pythia8303/bin/pythia8-config -DCMAKE_INSTALL_PREFIX=$TOOLS_DIR/eigen-3.3.9/ \
          -DCMAKE_C_FLAGS="-O3 -mfpmath=sse -march=native" -DCMAKE_CXX_FLAGS="-O3 -mfpmath=sse -march=native"
          make -j $nproc
          # now we build the documentation
          make doc && make undocumented && make undocumented_test
          # now we run the tests
          CTEST_OUTPUT_ON_FAILURE=1 ctest -j$nproc
          # finally, we check if the code is well formatted
          ./../bin/clang-format-helper.bash -t
          
